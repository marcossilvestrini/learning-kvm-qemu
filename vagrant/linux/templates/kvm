# -*- mode: ruby -*-
# vi: set ft=ruby :

# Require for create disks
require 'fileutils'

# Vagrant API version
VAGRANTFILE_API_VERSION = "2"

# INSTALL PLUGIN VBGUEST
unless Vagrant.has_plugin?("vagrant-vbguest")
  puts 'Installing vagrant-vbguest Plugin...'
  system('vagrant plugin install vagrant-vbguest')
end

# INSTALL PLUGIN DISKSIZE
unless Vagrant.has_plugin?("vagrant-disksize")
  puts 'Installing vagrant-disksize Plugin...'
  system('vagrant plugin install vagrant-disksize')
end

#DEFINE CONFIGS FOR ADICTIONAL DISKS

## file operations needs to be relative to this file
#VAGRANT_STORAGE = File.dirname(File.expand_path(__FILE__))
VAGRANT_STORAGE = "PATH_STORAGE"

## directory that will contain VDI files
VAGRANT_DISKS_DIRECTORY = "disks"

## controller definition
VAGRANT_CONTROLLER_NAME = "Virtual I/O Device SCSI controller"
VAGRANT_CONTROLLER_TYPE = "virtio-scsi"

## define disks
#The format is filename, size (GB), port (see controller docs)
local_disks = [
  { :filename => "disk1", :size => EXTRA_DISK_SIZE, :port => 5 }
  #{ :filename => "disk2", :size => 3, :port => 6 },
  #{ :filename => "disk3", :size => 5, :port => 25 }
]

# GLOBAL BOX CONFIGURATIONS
BOX_ROCK_NAME = "generic/rocky9"


# VARIABLE HOSTNAME
VM_ROCK_KVM_SERVER01= "rock-kvm-server01"

#DEFINE VM
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # GLOBAL VMGUEST CONFIGURATIONS
  config.vbguest.no_install  = true
  config.vbguest.auto_update = false
  config.vbguest.no_remote   = true
  
  # SET DOWNLOAD INSECURE CONFIG
  config.vm.box_download_insecure=true


  # VM rock_kvm_server01 - DNS Bind, Postfix,Samba, NFS, Pure-FTP
  config.vm.define "rock-kvm-server01"  do |rock_kvm_server01|
    
    # DEFINE BOX FOR USE
    rock_kvm_server01.vm.box = BOX_ROCK_NAME    

    # STORAGE
    
    ## SECONDARY DISK /dev/sdb
    disks_directory = File.join(VAGRANT_STORAGE, VAGRANT_DISKS_DIRECTORY)

    ## create disks before "up" action
    config.trigger.before :up do |trigger|
      trigger.name = "Create disks"
      trigger.ruby do
        unless File.directory?(disks_directory)
          FileUtils.mkdir_p(disks_directory)
        end
        local_disks.each do |local_disk|
          local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
          unless File.exist?(local_disk_filename)
            puts "Creating \"#{local_disk[:filename]}\" disk"
            system("vboxmanage createmedium --filename #{local_disk_filename} --size #{local_disk[:size] * 1024} --format VDI")
          end
        end
      end
    end

    ## create storage controller on first run
    unless File.directory?(disks_directory)
      config.vm.provider "virtualbox" do |storage_provider|
        storage_provider.customize ["storagectl", :id, "--name", VAGRANT_CONTROLLER_NAME, "--add", VAGRANT_CONTROLLER_TYPE, '--hostiocache', 'off']
      end
    end

    ## attach storage devices
    config.vm.provider "virtualbox" do |storage_provider|
      local_disks.each do |local_disk|
        local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
        unless File.exist?(local_disk_filename)
          storage_provider.customize ['storageattach', :id, '--storagectl', VAGRANT_CONTROLLER_NAME, '--port', local_disk[:port], '--device', 0, '--type', 'hdd', '--medium', local_disk_filename]
        end
      end
    end

    # MOUNTS
    rock_kvm_server01.vm.synced_folder ".", "/vagrant", disabled: true
    rock_kvm_server01.vm.synced_folder "../../security/", "/home/vagrant/security"
    rock_kvm_server01.vm.synced_folder "../../configs/linux/", "/home/vagrant/configs"
    rock_kvm_server01.vm.synced_folder "../../scripts/linux/", "/home/vagrant/scripts"
    rock_kvm_server01.vm.synced_folder "../../test/linux/", "/home/vagrant/test"

    # NETWORK    
    ## Bridge - Public Network
    rock_kvm_server01.vm.network "public_network", nic_type: "virtio", adapter: 2, mac: "080027f3066a", ip: "192.168.0.130", netmask: "255.255.255.0", mode: "bridge",bridge: [
      "Intel(R) I211 Gigabit Network Connection",
      "MediaTek Wi-Fi 6 MT7921 Wireless LAN"
    ]
    ## Host-Only - Private Network    
    rock_kvm_server01.vm.network "private_network", nic_type: "virtio", adapter: 3, mac: "080027f3066b", ip: "172.36.12.2", netmask: "255.255.255.0"

    # HOSTNAME
    rock_kvm_server01.vm.hostname =VM_ROCK_KVM_SERVER01

    # PROVIDER  CUSTOMIZATIONS
    rock_kvm_server01.vm.provider "virtualbox" do |vb|
      vb.linked_clone = true
      vb.name =VM_ROCK_KVM_SERVER01      
      vb.memory = VAGRANT_MEMORY
      vb.cpus = VAGRANT_CPU
      vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]      
    end

    # SSH,FIREWALLD,SELINUX, UPDATES AND PROFILE
    rock_kvm_server01.vm.provision "shell", name: "[USERDATA-ROCK.SH]", path: "../../scripts/linux/commons/userdata-rock.sh"

    # SET DNS BIND
    rock_kvm_server01.vm.provision "shell", name: "[USERDATA-BIND-MASTER.SH]", path: "../../scripts/linux/bind/userdata-bind-master.sh"

    # CONFIGURE PURE-FTP
    rock_kvm_server01.vm.provision "shell", name: "[USERDATA-PUREFTP.SH]", path: "../../scripts/linux/pure-ftp/userdata-pureftp.sh"

    # CONFIGURE SAMBA SHARE
    rock_kvm_server01.vm.provision "shell", name: "[USERDATA-SAMBA.SH]", path: "../../scripts/linux/samba/userdata-samba.sh"
    rock_kvm_server01.vm.provision "shell", name: "[USERDATA-SAMBA-CLIENT.SH]", path: "../../scripts/linux/samba/userdata-samba-client.sh"

    # INSTALL CONFIGURE PACKER
    rock_kvm_server01.vm.provision "shell", name: "[USERDATA-KVM.SH]", path: "../../scripts/linux/packer/userdata-packer.sh"

    # INSTALL CONFIGURE TERRAFORM
    rock_kvm_server01.vm.provision "shell", name: "[USERDATA-KVM.SH]", path: "../../scripts/linux/terraform/userdata-terraform.sh"

    # INSTALL CONFIGURE ANSIBLE
    rock_kvm_server01.vm.provision "shell", name: "[USERDATA-KVM.SH]", path: "../../scripts/linux/ansible/userdata-ansible.sh"

    # CONFIGURE KVM
    rock_kvm_server01.vm.provision "shell", name: "[USERDATA-KVM.SH]", path: "../../scripts/linux/kvm/userdata-kvm.sh"

    # RESTART SERVER FOR APPLY NETWORK CONFIGURATION
    #rock_kvm_server01.vm.provision :shell do |shell|
    #  shell.inline = 'echo Restart server...'
    #  shell.reboot = true
    #end    

    # cleanup after "destroy" action
    config.trigger.after :destroy do |trigger|
      trigger.name = "Cleanup operation"
      trigger.ruby do        
        # the following loop is now obsolete as these files will be removed automatically as machine dependency
        local_disks.each do |local_disk|
          local_disk_filename = File.join(disks_directory, "#{local_disk[:filename]}.vdi")
          if File.exist?(local_disk_filename)
            puts "Deleting \"#{local_disk[:filename]}\" disk"
            system("vboxmanage closemedium disk #{local_disk_filename} --delete")
          end
        end
        if File.exist?(disks_directory)
          FileUtils.rmdir(disks_directory)
        end
      end
    end

  end 

end